server {
    listen 80; 
    # If you are proxied, and the proxy doesn't support URL re-writing, A rewrite rule can be added here
    # rewrite ^REWRITE_URL_GOES_HERE(.*)$ /$1;
    location / {
        root /usr/share/nginx/html;
        # This is due to nginx and the try_files behavior below, it will always
        # try to hit the index as part of try_files.  If I set index as something
        # that doesn't resolve, we don't have to worry about index.html being cached.
        #
        # If frequent updates occur, it's important that index.html not be cached
        # in the browser.  Otherwise the software update will only occur when the
        # cached page expires.  The If-Modified-Since is a better way to handle this
        # for SPAs with frequent updates.
        index unresolvable-file-html.html;
        try_files $uri @index;
    }
    # This seperate location is so the no cache policy only applies to the index and nothing else.
    location @index {
        root /usr/share/nginx/html;
        add_header Cache-Control no-cache;
        expires 0;
        try_files /index.html =404;
    }
}
# server { 
#  listen 80;
#  server_name frontend;
#  location / {
#    # This would be the directory where your React app's static files are stored at
#    root /usr/share/nginx/html;
#    try_files $uri /index.html;
#  }
 
#  location */api/*/* {
#    proxy_set_header X-Real-IP $remote_addr;
#    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header X-NginX-Proxy true;
#    proxy_pass http://backend:8080/api/*;
#    proxy_ssl_session_reuse off;
#    proxy_set_header Host $http_host;
#    proxy_cache_bypass $http_upgrade;
#    proxy_redirect off;
#  }
# }